<Window x:Class="MVVM_PersonenDB.Views.ListView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MVVM_PersonenDB.Views"
        xmlns:l="clr-namespace:MVVM_PersonenDB"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        mc:Ignorable="d"
        Title="ListView" Height="450" Width="800"
        Style="{StaticResource StyWnd}">
    <Window.Resources>
        <l:StringToBrushConverter x:Key="string2brush"/>
    </Window.Resources>

    <DockPanel Margin="5">
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="Datei"/>
        </Menu>
        <WrapPanel DockPanel.Dock="Bottom"
                   HorizontalAlignment="Right"
                   Margin="10,0,10,5">
            <Button Content="Neue Person"
                    Command="{Binding NeuCmd}"/>
            <Button Content="Ändern Person"
                    Command="{Binding AendernCmd}"
                    CommandParameter="{Binding ElementName=DgdPersonen, Path=SelectedItem}"/>
            <Button Content="Lösche Person"
                    Command="{Binding LoeschenCmd}"
                    CommandParameter="{Binding ElementName=DgdPersonen, Path=SelectedItem}"/>
        </WrapPanel>
        <!--DataGrids werden zur Visualisierung komplexer Datenlisten verwendet. Die ItemSource-Property ist
        über eine Kurzbindung an den DataContext gebunden. Die einzelnen Eigenschaften der Objekte (vgl. die
        Column-Einträge) sind per Kurzbindungen an die ItemSource gebunden.
        Mit AutoGenerateColumns="False" verhindert man eine automatische Generierung der Spalten.
        IsManipulationEnabled="False" und IsReadOnly="True" führen dazu, dass der Benutzer die Einträge nicht 
        direkt bearbeiten kann.
        Setzt man sowohl Background, als auch AlternatingRowBackground, wechseln sich die Zeilen ihre Farbe
        betreffend ab.-->
        <DataGrid x:Name="DgdPersonen"
                  Margin="10"
                  ItemsSource="{Binding Personenliste}"
                  AutoGenerateColumns="False"
                  IsManipulationEnabled="False"
                  IsReadOnly="True"
                  AlternatingRowBackground="Wheat">
            <!--Mithilfen von Interaktion-Trigger können beliebige RoutedEvents auf Commands umgeleitet werden-->
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDoubleClick">
                    <i:InvokeCommandAction Command="{Binding AendernCmd}"
                                           CommandParameter="{Binding ElementName=DgdPersonen, Path=SelectedItem}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <!--In der Columns-Property definiert man die benötigten Spalten und bindet diese an die ItemSource-->
            <DataGrid.Columns>
                <DataGridTextColumn Header="Vorname" Binding="{Binding Vorname}" Width="*"/>
                <DataGridTextColumn Header="Nachname" Binding="{Binding Nachname}" Width="*"/>
                <DataGridTextColumn Header="Geschlecht" Binding="{Binding Geschlecht}" Width="Auto"/>
                <DataGridTextColumn Header="Geburtsdatum" Binding="{Binding Geburtsdatum, StringFormat=dd.MM.yyyy}" Width="Auto"/>
                <DataGridTextColumn Header="Lieblingsfarbe" Binding="{Binding Lieblingsfarbe}" Width="Auto">
                    <!--Mithilfe der CellStyle-Property können die Styles von Zellen angepasst werden-->
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Setter Property="Background" Value="{Binding Lieblingsfarbe, Converter={StaticResource string2brush}}"/>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <DataGridCheckBoxColumn Header="Verheiratet" Binding="{Binding Verheiratet}" Width="Auto"/>
            </DataGrid.Columns>
        </DataGrid>
    </DockPanel>
</Window>
